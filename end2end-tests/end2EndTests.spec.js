// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('End2EndTests', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('End2EndTests', async function() {
    // Test name: End2EndTests
    // Step # | name | target | value
	
	
	//Тест 1. Авторизация с несуществующим логином
    // 1 | open | http://localhost:8081/login | 
    await driver.get("http://localhost:8081/login")
    // 2 | type | id=username | alexheiden
    await driver.findElement(By.id("username")).sendKeys("alexheiden")
    // 3 | type | id=password | heiden83045
    await driver.findElement(By.id("password")).sendKeys("heiden83045")
    // 4 | click | css=.btn | 
    await driver.findElement(By.css(".btn")).click()
    // 5 | click | id=loginForm | 
    await driver.findElement(By.id("loginForm")).click()
    // 6 | verifyText | id=password-error-label | Invalid username or password
    assert(await driver.findElement(By.id("password-error-label")).getText() == "Invalid username or password")
    
	
	//Тест 2. Регистрация с невалидными параметрами
	// 7 | click | linkText=Sign up | 
    await driver.findElement(By.linkText("Sign up")).click()
    // 8 | type | id=name | 1
    await driver.findElement(By.id("name")).sendKeys("1")
    // 9 | click | id=weight | 
    await driver.findElement(By.id("weight")).click()
    // 10 | type | id=weight | -1
    await driver.findElement(By.id("weight")).sendKeys("-1")
    // 11 | click | id=username | 
    await driver.findElement(By.id("username")).click()
    // 12 | type | id=username | qw
    await driver.findElement(By.id("username")).sendKeys("qw")
    // 13 | click | id=password | 
    await driver.findElement(By.id("password")).click()
    // 14 | type | id=password | q
    await driver.findElement(By.id("password")).sendKeys("q")
    // 15 | click | css=.btn | 
    await driver.findElement(By.css(".btn")).click()
    // 16 | click | id=name-error-span | 
    await driver.findElement(By.id("name-error-span")).click()
    // 17 | verifyText | id=name-error-span | The name only contains the following characters: a-z, A-Z and spaces
    assert(await driver.findElement(By.id("name-error-span")).getText() == "The name only contains the following characters: a-z, A-Z and spaces")
    // 18 | click | id=registerForm | 
    await driver.findElement(By.id("registerForm")).click()
    // 19 | verifyText | id=weight-error-span | The weight only contains the following characters: 0-9 and '.'
    assert(await driver.findElement(By.id("weight-error-span")).getText() == "The weight only contains the following characters: 0-9 and \\\'.\\\'")
    // 20 | click | id=username-error-span | 
    await driver.findElement(By.id("username-error-span")).click()
    // 21 | verifyText | id=username-error-span | Username must contain from 8 to 30 characters
    assert(await driver.findElement(By.id("username-error-span")).getText() == "Username must contain from 8 to 30 characters")
    // 22 | mouseDownAt | id=registerForm | 58.79998779296875,274.6000061035156
    {
      const element = await driver.findElement(By.id("registerForm"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    // 23 | mouseMoveAt | id=registerForm | 58.79998779296875,274.6000061035156
    {
      const element = await driver.findElement(By.id("registerForm"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    // 24 | mouseUpAt | id=registerForm | 58.79998779296875,274.6000061035156
    {
      const element = await driver.findElement(By.id("registerForm"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    // 25 | click | id=registerForm | 
    await driver.findElement(By.id("registerForm")).click()
    // 26 | click | id=registerForm | 
    await driver.findElement(By.id("registerForm")).click()
    // 27 | verifyText | id=password-error-span | Password must contain from 8 to 50 characters
    assert(await driver.findElement(By.id("password-error-span")).getText() == "Password must contain from 8 to 50 characters")
    // 28 | click | id=registerForm | 
    await driver.findElement(By.id("registerForm")).click()
    
	
	//Тест 3. Регистрация
	// 29 | type | id=name | Alex Heiden
    await driver.findElement(By.id("name")).sendKeys("Alex Heiden")
    // 30 | click | id=registerForm | 
    await driver.findElement(By.id("registerForm")).click()
    // 31 | type | id=weight | 90
    await driver.findElement(By.id("weight")).sendKeys("90")
    // 32 | click | id=username | 
    await driver.findElement(By.id("username")).click()
    // 33 | type | id=username | alexheiden
    await driver.findElement(By.id("username")).sendKeys("alexheiden")
    // 34 | click | id=password | 
    await driver.findElement(By.id("password")).click()
    // 35 | type | id=password | heiden83045
    await driver.findElement(By.id("password")).sendKeys("heiden83045")
    // 36 | click | id=name | 
    await driver.findElement(By.id("name")).click()
    // 37 | click | id=weight | 
    await driver.findElement(By.id("weight")).click()
    // 38 | click | css=.btn | 
    await driver.findElement(By.css(".btn")).click()
    
	
	//Тест 4. Авторизация с некорректными параметрами
	// 39 | type | id=username | 1
    await driver.findElement(By.id("username")).sendKeys("1")
    // 40 | click | id=password | 
    await driver.findElement(By.id("password")).click()
    // 41 | type | id=password | 1
    await driver.findElement(By.id("password")).sendKeys("1")
    // 42 | click | css=.btn | 
    await driver.findElement(By.css(".btn")).click()
    // 43 | click | id=username-error-label | 
    await driver.findElement(By.id("username-error-label")).click()
    // 44 | verifyText | id=username-error-label | Username must contain from 8 to 30 characters
    assert(await driver.findElement(By.id("username-error-label")).getText() == "Username must contain from 8 to 30 characters")
    // 45 | click | id=loginForm | 
    await driver.findElement(By.id("loginForm")).click()
    // 46 | click | id=password-error-label | 
    await driver.findElement(By.id("password-error-label")).click()
    // 47 | verifyText | id=password-error-label | Password must contain from 8 to 50 characters
    assert(await driver.findElement(By.id("password-error-label")).getText() == "Password must contain from 8 to 50 characters")
    
	
	//Тест 5. Авторизация
	// 48 | click | id=username | 
    await driver.findElement(By.id("username")).click()
    // 49 | type | id=username | alexheiden
    await driver.findElement(By.id("username")).sendKeys("alexheiden")
    // 50 | click | id=password | 
    await driver.findElement(By.id("password")).click()
    // 51 | type | id=password | heiden83045
    await driver.findElement(By.id("password")).sendKeys("heiden83045")
    // 52 | click | css=.btn | 
    await driver.findElement(By.css(".btn")).click()
    // 53 | mouseOver | id=setting-box | 
    {
      const element = await driver.findElement(By.id("setting-box"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    
	
	//Тест 6. Проверка данных пользователя в настройках
	// 54 | click | linkText=Profile settings | 
    await driver.findElement(By.linkText("Profile settings")).click()
    // 55 | click | id=name | 
    await driver.findElement(By.id("name")).click()
    // 56 | verifyValue | id=name | Alex Heiden
    {
      const value = await driver.findElement(By.id("name")).getAttribute("value")
      assert(value == "Alex Heiden")
    }
    // 57 | click | id=weight | 
    await driver.findElement(By.id("weight")).click()
    // 58 | verifyValue | id=weight | 90.0
    {
      const value = await driver.findElement(By.id("weight")).getAttribute("value")
      assert(value == "90.0")
    }
    
	
	//Тест 7. Изменение данных профиля с некорректными параметрами
	// 59 | type | id=name | 1
    await driver.findElement(By.id("name")).sendKeys("1")
    // 60 | type | id=weight | -1
    await driver.findElement(By.id("weight")).sendKeys("-1")
    // 61 | click | id=password | 
    await driver.findElement(By.id("password")).click()
    // 62 | type | id=password | a
    await driver.findElement(By.id("password")).sendKeys("a")
    // 63 | click | id=btn-save | 
    await driver.findElement(By.id("btn-save")).click()
    // 64 | click | id=name-error-span | 
    await driver.findElement(By.id("name-error-span")).click()
    // 65 | verifyText | id=name-error-span | The name only contains the following characters: a-z, A-Z and spaces
    assert(await driver.findElement(By.id("name-error-span")).getText() == "The name only contains the following characters: a-z, A-Z and spaces")
    // 66 | verifyText | id=weight-error-span | The weight only contains the following characters: 0-9 and '.'
    assert(await driver.findElement(By.id("weight-error-span")).getText() == "The weight only contains the following characters: 0-9 and \\\'.\\\'")
    // 67 | verifyText | id=password-error-span | Password must contain from 8 to 50 characters
    assert(await driver.findElement(By.id("password-error-span")).getText() == "Password must contain from 8 to 50 characters")
    
	
	//Тест 8. Изменение данных профиля
	// 68 | type | id=name | Alex Heidep
    await driver.findElement(By.id("name")).sendKeys("Alex Heidep")
    // 69 | type | id=weight | 85
    await driver.findElement(By.id("weight")).sendKeys("85")
    // 70 | type | id=password | heiden83046
    await driver.findElement(By.id("password")).sendKeys("heiden83046")
    // 71 | click | id=btn-save | 
    await driver.findElement(By.id("btn-save")).click()
    // 72 | click | id=settingsForm | 
    await driver.findElement(By.id("settingsForm")).click()
    // 73 | click | linkText=Back | 
    await driver.findElement(By.linkText("Back")).click()
    
	
	//Тест 9. Логаут и попытка зайти по измененному паролю
	// 74 | mouseOver | id=signout-box | 
    {
      const element = await driver.findElement(By.id("signout-box"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    // 75 | click | css=button | 
    await driver.findElement(By.css("button")).click()
    // 76 | type | id=username | alexheiden
    await driver.findElement(By.id("username")).sendKeys("alexheiden")
    // 77 | type | id=password | heiden83046
    await driver.findElement(By.id("password")).sendKeys("heiden83046")
    // 78 | click | css=.btn | 
    await driver.findElement(By.css(".btn")).click()
    
	
	//Тест 10. Создание продукта с невалидными параметрами
	// 79 | click | id=add-product-link | 
    await driver.findElement(By.id("add-product-link")).click()
    // 80 | type | id=name | fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    await driver.findElement(By.id("name")).sendKeys("fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")
    // 81 | click | id=calories | 
    await driver.findElement(By.id("calories")).click()
    // 82 | type | id=calories | -1
    await driver.findElement(By.id("calories")).sendKeys("-1")
    // 83 | click | id=createProductForm | 
    await driver.findElement(By.id("createProductForm")).click()
    // 84 | type | id=proteins | -1
    await driver.findElement(By.id("proteins")).sendKeys("-1")
    // 85 | click | id=createProductForm | 
    await driver.findElement(By.id("createProductForm")).click()
    // 86 | type | id=fats | -1
    await driver.findElement(By.id("fats")).sendKeys("-1")
    // 87 | click | id=createProductForm | 
    await driver.findElement(By.id("createProductForm")).click()
    // 88 | type | id=carbohydrates | -1
    await driver.findElement(By.id("carbohydrates")).sendKeys("-1")
    // 89 | click | id=btn-add | 
    await driver.findElement(By.id("btn-add")).click()
    // 90 | click | id=createProductForm | 
    await driver.findElement(By.id("createProductForm")).click()
    // 91 | verifyText | id=name-error-span | Name must be limited to 100 characters
    assert(await driver.findElement(By.id("name-error-span")).getText() == "Name must be limited to 100 characters")
    // 92 | verifyText | id=calories-error-span | The calories only contains the following characters: 0-9
    assert(await driver.findElement(By.id("calories-error-span")).getText() == "The calories only contains the following characters: 0-9")
    // 93 | verifyText | id=proteins-error-span | The proteins only contains the following characters: 0-9 and '.'
    assert(await driver.findElement(By.id("proteins-error-span")).getText() == "The proteins only contains the following characters: 0-9 and \\\'.\\\'")
    // 94 | verifyText | id=fats-error-span | The fats only contains the following characters: 0-9 and '.'
    assert(await driver.findElement(By.id("fats-error-span")).getText() == "The fats only contains the following characters: 0-9 and \\\'.\\\'")
    // 95 | verifyText | id=carbohydrates-error-span | The carbohydrates only contains the following characters: 0-9 and '.'
    assert(await driver.findElement(By.id("carbohydrates-error-span")).getText() == "The carbohydrates only contains the following characters: 0-9 and \\\'.\\\'")
    
	
	//Тест 11. Создание продукта
	// 96 | click | id=createProductForm | 
    await driver.findElement(By.id("createProductForm")).click()
    // 97 | type | id=name | Bread
    await driver.findElement(By.id("name")).sendKeys("Bread")
    // 98 | click | id=createProductForm | 
    await driver.findElement(By.id("createProductForm")).click()
    // 99 | type | id=calories | 15
    await driver.findElement(By.id("calories")).sendKeys("15")
    // 100 | click | id=createProductForm | 
    await driver.findElement(By.id("createProductForm")).click()
    // 101 | type | id=proteins | 26.2
    await driver.findElement(By.id("proteins")).sendKeys("26.2")
    // 102 | click | id=createProductForm | 
    await driver.findElement(By.id("createProductForm")).click()
    // 103 | type | id=fats | 12.90
    await driver.findElement(By.id("fats")).sendKeys("12.90")
    // 104 | click | id=carbohydrates | 
    await driver.findElement(By.id("carbohydrates")).click()
    // 105 | type | id=carbohydrates | 43.65
    await driver.findElement(By.id("carbohydrates")).sendKeys("43.65")
    // 106 | click | id=btn-add | 
    await driver.findElement(By.id("btn-add")).click()
    // 107 | type | id=name | Beer
    await driver.findElement(By.id("name")).sendKeys("Beer")
    // 108 | click | id=createProductForm | 
    await driver.findElement(By.id("createProductForm")).click()
    // 109 | type | id=calories | 132
    await driver.findElement(By.id("calories")).sendKeys("132")
    // 110 | click | id=createProductForm | 
    await driver.findElement(By.id("createProductForm")).click()
    // 111 | type | id=proteins | 456
    await driver.findElement(By.id("proteins")).sendKeys("456")
    // 112 | click | id=createProductForm | 
    await driver.findElement(By.id("createProductForm")).click()
    // 113 | type | id=fats | 387
    await driver.findElement(By.id("fats")).sendKeys("387")
    // 114 | click | id=createProductForm | 
    await driver.findElement(By.id("createProductForm")).click()
    // 115 | type | id=carbohydrates | 12
    await driver.findElement(By.id("carbohydrates")).sendKeys("12")
    // 116 | click | id=btn-add | 
    await driver.findElement(By.id("btn-add")).click()
    // 117 | click | id=btn-back-to-main | 
    await driver.findElement(By.id("btn-back-to-main")).click()
    
	
	//Тест 12. Получение списка продуктов
	// 118 | click | id=list-my-product-btn | 
    await driver.findElement(By.id("list-my-product-btn")).click()
    // 119 | mouseDownAt | id=products0.name | 50.600006103515625,11.199996948242188
    {
      const element = await driver.findElement(By.id("products0.name"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    // 120 | mouseMoveAt | id=products0.name | 50.600006103515625,11.199996948242188
    {
      const element = await driver.findElement(By.id("products0.name"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    // 121 | click | css=.data-table-container | 
    await driver.findElement(By.css(".data-table-container")).click()
    // 122 | verifyValue | id=products0.name | Bread
    {
      const value = await driver.findElement(By.id("products0.name")).getAttribute("value")
      assert(value == "Bread")
    }
    
	
	//Тест 13. Изменение продуктов с некорректными параметрами
    // 131 | click | id=products1.carbohydrates | 
    await driver.findElement(By.id("products1.carbohydrates")).click()
    // 132 | click | id=products0.calories | 
    await driver.findElement(By.id("products0.calories")).click()
    // 133 | type | id=products0.calories | -15
    await driver.findElement(By.id("products0.calories")).sendKeys("-15")
    // 134 | click | id=products1.proteins | 
    await driver.findElement(By.id("products1.proteins")).click()
    // 135 | type | id=products1.proteins | -456.0
    await driver.findElement(By.id("products1.proteins")).sendKeys("-456.0")
    // 136 | click | id=btn-apply-changes | 
    await driver.findElement(By.id("btn-apply-changes")).click()
    // 137 | click | id=client-error-box | 
    await driver.findElement(By.id("client-error-box")).click()
    // 138 | verifyText | id=client-error-message | Calories are a non-negative integer.\nProteins are positive float numbers, accurate to two decimal places.
    assert(await driver.findElement(By.id("client-error-message")).getText() == "Calories are a non-negative integer.\\\\nProteins are positive float numbers, accurate to two decimal places.")
    // 139 | click | css=#client-error-box > button | 
    await driver.findElement(By.css("#client-error-box > button")).click()
    
	
	//Тест 14. Изменение продуктов
	// 140 | click | id=products0.calories | 
    await driver.findElement(By.id("products0.calories")).click()
    // 141 | click | id=products0.calories | 
    await driver.findElement(By.id("products0.calories")).click()
    // 142 | type | id=products0.calories | 156
    await driver.findElement(By.id("products0.calories")).sendKeys("156")
    // 143 | click | id=products1.proteins | 
    await driver.findElement(By.id("products1.proteins")).click()
    // 144 | click | id=products1.proteins | 
    await driver.findElement(By.id("products1.proteins")).click()
    // 145 | type | id=products1.proteins | 12
    await driver.findElement(By.id("products1.proteins")).sendKeys("12")
    // 146 | click | id=products1.name | 
    await driver.findElement(By.id("products1.name")).click()
    // 147 | type | id=products1.name | Beer Bear
    await driver.findElement(By.id("products1.name")).sendKeys("Beer Bear")
    // 148 | click | id=btn-apply-changes | 
    await driver.findElement(By.id("btn-apply-changes")).click()
    // 149 | click | css=tr:nth-child(2) > td:nth-child(1) | 
    await driver.findElement(By.css("tr:nth-child(2) > td:nth-child(1)")).click()
    // 150 | verifyValue | id=products1.name | Beer  Bear
    {
      const value = await driver.findElement(By.id("products1.name")).getAttribute("value")
      assert(value == "Beer  Bear")
    }
    // 151 | click | css=tbody > tr:nth-child(1) | 
    await driver.findElement(By.css("tbody > tr:nth-child(1)")).click()
    // 152 | verifyValue | id=products0.calories | 156
    {
      const value = await driver.findElement(By.id("products0.calories")).getAttribute("value")
      assert(value == "156")
    }
    // 153 | click | css=tr:nth-child(2) | 
    await driver.findElement(By.css("tr:nth-child(2)")).click()
    // 154 | verifyValue | id=products1.proteins | 12.0
    {
      const value = await driver.findElement(By.id("products1.proteins")).getAttribute("value")
      assert(value == "12.0")
    }
    
	
	//Тест 15. Удаление продукта без "Apply changes"
	// 155 | click | id=idsToDelete2 | 
    await driver.findElement(By.id("idsToDelete2")).click()
    // 156 | click | id=btn-delete | 
    await driver.findElement(By.id("btn-delete")).click()
    // 157 | click | id=btn-back-to-main | 
    await driver.findElement(By.id("btn-back-to-main")).click()
    // 158 | click | id=list-my-product-btn | 
    await driver.findElement(By.id("list-my-product-btn")).click()
    // 159 | click | id=products1.name | 
    await driver.findElement(By.id("products1.name")).click()
    // 160 | verifyValue | id=products1.name | Beer  Bear
    {
      const value = await driver.findElement(By.id("products1.name")).getAttribute("value")
      assert(value == "Beer  Bear")
    }
    
	
	//Тест 16. Удаление продукта с "Apply Changes"
	// 161 | click | id=idsToDelete1 | 
    await driver.findElement(By.id("idsToDelete1")).click()
    // 162 | click | id=btn-delete | 
    await driver.findElement(By.id("btn-delete")).click()
    // 163 | click | id=btn-apply-changes | 
    await driver.findElement(By.id("btn-apply-changes")).click()
    // 164 | click | id=btn-back-to-main | 
    await driver.findElement(By.id("btn-back-to-main")).click()
    // 165 | click | id=list-my-product-btn | 
    await driver.findElement(By.id("list-my-product-btn")).click()
    // 166 | click | css=body | 
    await driver.findElement(By.css("body")).click()
    // 167 | verifyValue | id=products0.name | Beer  Bear
    {
      const value = await driver.findElement(By.id("products0.name")).getAttribute("value")
      assert(value == "Beer  Bear")
    }
    // 168 | click | id=btn-back-to-main | 
    await driver.findElement(By.id("btn-back-to-main")).click()
    
	
	//Тест 17. Поиск продукта пользователя при создании приема пищи
	// 169 | click | id=Add-meal-link | 
    await driver.findElement(By.id("Add-meal-link")).click()
    // 170 | click | id=search-input | 
    await driver.findElement(By.id("search-input")).click()
    // 171 | type | id=search-input | Beer
    await driver.findElement(By.id("search-input")).sendKeys("Beer")
    // 172 | click | id=search-btn | 
    await driver.findElement(By.id("search-btn")).click()
    // 173 | verifyText | css=tr:nth-child(1) > td:nth-child(2) | Beer Bear
    assert(await driver.findElement(By.css("tr:nth-child(1) > td:nth-child(2)")).getText() == "Beer Bear")
    
	
	//Тест 18. Добавление продуктов в таблицу
	// 174 | click | id=productsToSelect1 | 
    await driver.findElement(By.id("productsToSelect1")).click()
    // 175 | click | id=productsToSelect2 | 
    await driver.findElement(By.id("productsToSelect2")).click()
    // 176 | click | id=btn-add-product | 
    await driver.findElement(By.id("btn-add-product")).click()
    // 177 | verifyValue | id=productsToAdd0.weight | 0.0
    {
      const value = await driver.findElement(By.id("productsToAdd0.weight")).getAttribute("value")
      assert(value == "0.0")
    }
    // 178 | click | id=productsToAdd1.weight | 
    await driver.findElement(By.id("productsToAdd1.weight")).click()
    // 179 | verifyValue | id=productsToAdd1.weight | 0.0
    {
      const value = await driver.findElement(By.id("productsToAdd1.weight")).getAttribute("value")
      assert(value == "0.0")
    }
    // 180 | verifyText | css=#list-of-chosen-product-table tr:nth-child(1) > td:nth-child(2) | Beer Bear
    assert(await driver.findElement(By.css("#list-of-chosen-product-table tr:nth-child(1) > td:nth-child(2)")).getText() == "Beer Bear")
    
	
	//Тест 19. Удаление продуктов из таблицы
	// 181 | click | id=btn-clear | 
    await driver.findElement(By.id("btn-clear")).click()
    // 182 | click | id=productsToSelect2 | 
    await driver.findElement(By.id("productsToSelect2")).click()
    // 183 | click | id=btn-add-product | 
    await driver.findElement(By.id("btn-add-product")).click()
    // 184 | verifyText | css=#list-of-chosen-product-table td:nth-child(2) | Beer
    assert(await driver.findElement(By.css("#list-of-chosen-product-table td:nth-child(2)")).getText() == "Beer")
    
	
	//Тест 20. Добавление продуктов с невалидным весом в прием пищи
	// 185 | click | id=productsToSelect1 | 
    await driver.findElement(By.id("productsToSelect1")).click()
    // 186 | click | id=btn-add-product | 
    await driver.findElement(By.id("btn-add-product")).click()
    // 187 | click | id=productsToAdd0.weight | 
    await driver.findElement(By.id("productsToAdd0.weight")).click()
    // 188 | type | id=productsToAdd0.weight | -12
    await driver.findElement(By.id("productsToAdd0.weight")).sendKeys("-12")
    // 189 | click | id=productsToAdd1.weight | 
    await driver.findElement(By.id("productsToAdd1.weight")).click()
    // 190 | type | id=productsToAdd1.weight | -12
    await driver.findElement(By.id("productsToAdd1.weight")).sendKeys("-12")
    // 191 | click | id=btn-add-meal | 
    await driver.findElement(By.id("btn-add-meal")).click()
    // 192 | click | id=client-error-container | 
    await driver.findElement(By.id("client-error-container")).click()
    // 193 | verifyText | id=client-error-message | Enter the value of the weight.\nProduct weight is a positive Float number, accurate to 2 decimal places.
    assert(await driver.findElement(By.id("client-error-message")).getText() == "Enter the value of the weight.\\\\nProduct weight is a positive Float number, accurate to 2 decimal places.")
    // 194 | click | css=#client-error-box > button | 
    await driver.findElement(By.css("#client-error-box > button")).click()
    
	
	//Тест 21. Создание приемов пищи
	// 195 | click | id=productsToAdd0.weight | 
    await driver.findElement(By.id("productsToAdd0.weight")).click()
    // 196 | type | id=productsToAdd0.weight | 12
    await driver.findElement(By.id("productsToAdd0.weight")).sendKeys("12")
    // 197 | click | id=productsToAdd1.weight | 
    await driver.findElement(By.id("productsToAdd1.weight")).click()
    // 198 | type | id=productsToAdd1.weight | 12
    await driver.findElement(By.id("productsToAdd1.weight")).sendKeys("12")
    // 199 | click | id=btn-add-meal | 
    await driver.findElement(By.id("btn-add-meal")).click()
    // 200 | click | id=date | 
    await driver.findElement(By.id("date")).click()
    // 201 | click | id=date | 
    await driver.findElement(By.id("date")).click()
    // 202 | type | id=date | 2024-03-28
    await driver.findElement(By.id("date")).sendKeys("2024-03-28")
    // 203 | click | id=btn-add | 
    await driver.findElement(By.id("btn-add")).click()
    // 204 | click | id=btn-back-to-main | 
    await driver.findElement(By.id("btn-back-to-main")).click()
    
	
	//Тест 22. Получение созданных приемов пищи
	// 205 | click | id=change-meals-link | 
    await driver.findElement(By.id("change-meals-link")).click()
    // 206 | click | id=date | 
    await driver.findElement(By.id("date")).click()
    // 207 | type | id=date | 2024-03-28
    await driver.findElement(By.id("date")).sendKeys("2024-03-28")
    // 208 | click | id=search-btn | 
    await driver.findElement(By.id("search-btn")).click()
    // 209 | click | id=mealsToChange1.product.name | 
    await driver.findElement(By.id("mealsToChange1.product.name")).click()
    // 210 | verifyValue | id=mealsToChange0.product.name | Beer
    {
      const value = await driver.findElement(By.id("mealsToChange0.product.name")).getAttribute("value")
      assert(value == "Beer")
    }
    // 211 | verifyValue | id=mealsToChange1.product.name | Beer  Bear
    {
      const value = await driver.findElement(By.id("mealsToChange1.product.name")).getAttribute("value")
      assert(value == "Beer  Bear")
    }
    // 212 | click | id=mealsToChange1.weight | 
    await driver.findElement(By.id("mealsToChange1.weight")).click()
    // 213 | verifyValue | id=mealsToChange1.weight | 12.0
    {
      const value = await driver.findElement(By.id("mealsToChange1.weight")).getAttribute("value")
      assert(value == "12.0")
    }
    // 214 | click | id=mealsToChange1.product.calories | 
    await driver.findElement(By.id("mealsToChange1.product.calories")).click()
    // 215 | verifyValue | id=mealsToChange1.product.calories | 132
    {
      const value = await driver.findElement(By.id("mealsToChange1.product.calories")).getAttribute("value")
      assert(value == "132")
    }
    // 216 | click | id=mealsToChange1.product.proteins | 
    await driver.findElement(By.id("mealsToChange1.product.proteins")).click()
    // 217 | verifyValue | id=mealsToChange1.product.proteins | 12.0
    {
      const value = await driver.findElement(By.id("mealsToChange1.product.proteins")).getAttribute("value")
      assert(value == "12.0")
    }
    // 218 | click | id=mealsToChange1.product.fats | 
    await driver.findElement(By.id("mealsToChange1.product.fats")).click()
    // 219 | verifyValue | id=mealsToChange1.product.fats | 387.0
    {
      const value = await driver.findElement(By.id("mealsToChange1.product.fats")).getAttribute("value")
      assert(value == "387.0")
    }
    // 220 | click | id=mealsToChange1.product.carbohydrates | 
    await driver.findElement(By.id("mealsToChange1.product.carbohydrates")).click()
    // 221 | verifyValue | id=mealsToChange1.product.carbohydrates | 12.0
    {
      const value = await driver.findElement(By.id("mealsToChange1.product.carbohydrates")).getAttribute("value")
      assert(value == "12.0")
    }
    
	
	//Тест 23. Изменение приемов пищи с невалидными параметрами
	// 222 | click | id=mealsToChange0.weight | 
    await driver.findElement(By.id("mealsToChange0.weight")).click()
    // 223 | type | id=mealsToChange0.weight | -12.0
    await driver.findElement(By.id("mealsToChange0.weight")).sendKeys("-12.0")
    // 224 | click | id=mealsToChange1.weight | 
    await driver.findElement(By.id("mealsToChange1.weight")).click()
    // 225 | type | id=mealsToChange1.weight | -12.0
    await driver.findElement(By.id("mealsToChange1.weight")).sendKeys("-12.0")
    // 226 | click | id=btn-apply-changes | 
    await driver.findElement(By.id("btn-apply-changes")).click()
    // 227 | click | id=client-error-message | 
    await driver.findElement(By.id("client-error-message")).click()
    // 228 | verifyText | id=client-error-message | Please enter the value of the weight.\nThe weight is a positive float number, accurate to 2 decimal places.
    assert(await driver.findElement(By.id("client-error-message")).getText() == "Please enter the value of the weight.\\\\nThe weight is a positive float number, accurate to 2 decimal places.")
    // 229 | click | css=#client-error-box > button | 
    await driver.findElement(By.css("#client-error-box > button")).click()
    
	
	//Тест 24. Изменение приемов пищи
	// 230 | click | id=mealsToChange0.weight | 
    await driver.findElement(By.id("mealsToChange0.weight")).click()
    // 231 | type | id=mealsToChange0.weight | 100
    await driver.findElement(By.id("mealsToChange0.weight")).sendKeys("100")
    // 232 | click | id=mealsToChange1.weight | 
    await driver.findElement(By.id("mealsToChange1.weight")).click()
    // 233 | type | id=mealsToChange1.weight | 100
    await driver.findElement(By.id("mealsToChange1.weight")).sendKeys("100")
    // 234 | click | id=btn-apply-changes | 
    await driver.findElement(By.id("btn-apply-changes")).click()
    // 235 | click | id=mealsToChange0.weight | ы
    await driver.findElement(By.id("mealsToChange0.weight")).click()
    // 236 | verifyValue | id=mealsToChange0.weight | 100.0
    {
      const value = await driver.findElement(By.id("mealsToChange0.weight")).getAttribute("value")
      assert(value == "100.0")
    }
    // 237 | click | id=mealsToChange1.weight | 
    await driver.findElement(By.id("mealsToChange1.weight")).click()
    // 238 | verifyValue | id=mealsToChange1.weight | 100.0
    {
      const value = await driver.findElement(By.id("mealsToChange1.weight")).getAttribute("value")
      assert(value == "100.0")
    }
    
	
	//Тест 25. Удаление приемов пищи без "Apply Changes"
	// 239 | click | id=idsMealsToDelete1 | 
    await driver.findElement(By.id("idsMealsToDelete1")).click()
    // 240 | click | id=btn-delete | 
    await driver.findElement(By.id("btn-delete")).click()
    // 241 | click | css=.data-table-container | 
    await driver.findElement(By.css(".data-table-container")).click()
    // 242 | type | id=date | 2024-03-28
    await driver.findElement(By.id("date")).sendKeys("2024-03-28")
    // 243 | click | id=search-btn | 
    await driver.findElement(By.id("search-btn")).click()
    // 244 | verifyValue | id=mealsToChange1.product.name | Beer  Bear
    {
      const value = await driver.findElement(By.id("mealsToChange1.product.name")).getAttribute("value")
      assert(value == "Beer  Bear")
    }
    
	
	//Тест 26. Удаление приемов пищи с "Apply Changes"
	// 245 | click | id=idsMealsToDelete1 | 
    await driver.findElement(By.id("idsMealsToDelete1")).click()
    // 246 | click | id=btn-delete | 
    await driver.findElement(By.id("btn-delete")).click()
    // 247 | click | id=btn-apply-changes | 
    await driver.findElement(By.id("btn-apply-changes")).click()
    // 248 | click | id=date | 
    await driver.findElement(By.id("date")).click()
    // 249 | type | id=date | 2024-03-28
    await driver.findElement(By.id("date")).sendKeys("2024-03-28")
    // 250 | click | id=search-btn | 
    await driver.findElement(By.id("search-btn")).click()
    // 251 | click | id=mealsToChange0.product.name | 
    await driver.findElement(By.id("mealsToChange0.product.name")).click()
    // 252 | verifyValue | id=mealsToChange0.product.name | Beer  Bear
    {
      const value = await driver.findElement(By.id("mealsToChange0.product.name")).getAttribute("value")
      assert(value == "Beer  Bear")
    }
    // 253 | click | id=btn-back-to-main | 
    await driver.findElement(By.id("btn-back-to-main")).click()
    
	
	//Тест 27. Получение статистики
	// 254 | click | id=get-summary-link | 
    await driver.findElement(By.id("get-summary-link")).click()
    // 255 | click | id=start-date | 
    await driver.findElement(By.id("start-date")).click()
    // 256 | type | id=start-date | 2013-03-28
    await driver.findElement(By.id("start-date")).sendKeys("2013-03-28")
    // 257 | click | id=end-date | 
    await driver.findElement(By.id("end-date")).click()
    // 258 | type | id=end-date | 2013-03-28
    await driver.findElement(By.id("end-date")).sendKeys("2013-03-28")
    // 259 | click | id=get-summary-table-btn | 
    await driver.findElement(By.id("get-summary-table-btn")).click()
    // 260 | click | id=start-date | 
    await driver.findElement(By.id("start-date")).click()
    // 261 | type | id=start-date | 2024-03-28
    await driver.findElement(By.id("start-date")).sendKeys("2024-03-28")
    // 262 | click | id=end-date | 
    await driver.findElement(By.id("end-date")).click()
    // 263 | type | id=end-date | 2024-03-28
    await driver.findElement(By.id("end-date")).sendKeys("2024-03-28")
    // 264 | click | id=get-summary-table-btn | 
    await driver.findElement(By.id("get-summary-table-btn")).click()
    // 265 | click | css=td:nth-child(1) | 
    await driver.findElement(By.css("td:nth-child(1)")).click()
    // 266 | verifyText | css=td:nth-child(1) | 28.03.2024
    assert(await driver.findElement(By.css("td:nth-child(1)")).getText() == "28.03.2024")
    // 267 | click | css=td:nth-child(2) | 
    await driver.findElement(By.css("td:nth-child(2)")).click()
    // 268 | verifyText | css=td:nth-child(2) | 100.0
    assert(await driver.findElement(By.css("td:nth-child(2)")).getText() == "100.0")
    // 269 | click | css=td:nth-child(3) | 
    await driver.findElement(By.css("td:nth-child(3)")).click()
    // 270 | verifyText | css=td:nth-child(3) | 132.0
    assert(await driver.findElement(By.css("td:nth-child(3)")).getText() == "132.0")
    // 271 | click | css=td:nth-child(4) | 
    await driver.findElement(By.css("td:nth-child(4)")).click()
    // 272 | verifyText | css=td:nth-child(4) | 12.0
    assert(await driver.findElement(By.css("td:nth-child(4)")).getText() == "12.0")
    // 273 | click | css=td:nth-child(5) | 
    await driver.findElement(By.css("td:nth-child(5)")).click()
    // 274 | verifyText | css=td:nth-child(5) | 387.0
    assert(await driver.findElement(By.css("td:nth-child(5)")).getText() == "387.0")
    // 275 | click | css=td:nth-child(6) | 
    await driver.findElement(By.css("td:nth-child(6)")).click()
    // 276 | verifyText | css=td:nth-child(6) | 12.0
    assert(await driver.findElement(By.css("td:nth-child(6)")).getText() == "12.0")
    // 277 | click | id=btn-back | 
    await driver.findElement(By.id("btn-back")).click()
  })
})

